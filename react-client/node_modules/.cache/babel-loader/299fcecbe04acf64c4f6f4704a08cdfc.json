{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Documents\\\\nodejs-new\\\\react-client\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\n// App.js\nimport React, { useState, useEffect } from 'react';\nimport io from 'socket.io-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io('http://localhost:3001');\n\nfunction App() {\n  _s();\n\n  const [message, setMessage] = useState('');\n  const [chat, setChat] = useState([]);\n  useEffect(() => {\n    // Listen for incoming messages\n    socket.on('receiveMessage', message => {\n      setChat(prevChat => [...prevChat, message]);\n    }); // Cleanup on component unmount\n\n    return () => {\n      socket.off('receiveMessage');\n    };\n  }, []);\n\n  const sendMessage = () => {\n    // Send the message to the server\n    socket.emit('sendMessage', message);\n    setMessage('');\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Chat Application\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: chat.map((msg, index) => /*#__PURE__*/_jsxDEV(\"p\", {\n        children: msg\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      value: message,\n      onChange: e => setMessage(e.target.value),\n      placeholder: \"Type a message...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: sendMessage,\n      children: \"Send\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"fi/IGQg4eRn1At1LK6QvoIC5kKc=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/User/Documents/nodejs-new/react-client/src/App.js"],"names":["React","useState","useEffect","io","socket","App","message","setMessage","chat","setChat","on","prevChat","off","sendMessage","emit","map","msg","index","e","target","value"],"mappings":";;;AAAA;AACA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,EAAP,MAAe,kBAAf;;AAEA,MAAMC,MAAM,GAAGD,EAAE,CAAC,uBAAD,CAAjB;;AAEA,SAASE,GAAT,GAAe;AAAA;;AACb,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBN,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM,CAACO,IAAD,EAAOC,OAAP,IAAkBR,QAAQ,CAAC,EAAD,CAAhC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd;AACAE,IAAAA,MAAM,CAACM,EAAP,CAAU,gBAAV,EAA6BJ,OAAD,IAAa;AACvCG,MAAAA,OAAO,CAAEE,QAAD,IAAc,CAAC,GAAGA,QAAJ,EAAcL,OAAd,CAAf,CAAP;AACD,KAFD,EAFc,CAMd;;AACA,WAAO,MAAM;AACXF,MAAAA,MAAM,CAACQ,GAAP,CAAW,gBAAX;AACD,KAFD;AAGD,GAVQ,EAUN,EAVM,CAAT;;AAYA,QAAMC,WAAW,GAAG,MAAM;AACxB;AACAT,IAAAA,MAAM,CAACU,IAAP,CAAY,aAAZ,EAA2BR,OAA3B;AACAC,IAAAA,UAAU,CAAC,EAAD,CAAV;AACD,GAJD;;AAMA,sBACE;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAA,gBACGC,IAAI,CAACO,GAAL,CAAS,CAACC,GAAD,EAAMC,KAAN,kBACR;AAAA,kBAAgBD;AAAhB,SAAQC,KAAR;AAAA;AAAA;AAAA;AAAA,cADD;AADH;AAAA;AAAA;AAAA;AAAA,YAFF,eAOE;AACE,MAAA,KAAK,EAAEX,OADT;AAEE,MAAA,QAAQ,EAAGY,CAAD,IAAOX,UAAU,CAACW,CAAC,CAACC,MAAF,CAASC,KAAV,CAF7B;AAGE,MAAA,WAAW,EAAC;AAHd;AAAA;AAAA;AAAA;AAAA,YAPF,eAYE;AAAQ,MAAA,OAAO,EAAEP,WAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAZF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAgBD;;GAtCQR,G;;KAAAA,G;AAwCT,eAAeA,GAAf","sourcesContent":["// App.js\nimport React, { useState, useEffect } from 'react';\nimport io from 'socket.io-client';\n\nconst socket = io('http://localhost:3001');\n\nfunction App() {\n  const [message, setMessage] = useState('');\n  const [chat, setChat] = useState([]);\n\n  useEffect(() => {\n    // Listen for incoming messages\n    socket.on('receiveMessage', (message) => {\n      setChat((prevChat) => [...prevChat, message]);\n    });\n\n    // Cleanup on component unmount\n    return () => {\n      socket.off('receiveMessage');\n    };\n  }, []);\n\n  const sendMessage = () => {\n    // Send the message to the server\n    socket.emit('sendMessage', message);\n    setMessage('');\n  };\n\n  return (\n    <div>\n      <h1>Chat Application</h1>\n      <div>\n        {chat.map((msg, index) => (\n          <p key={index}>{msg}</p>\n        ))}\n      </div>\n      <input\n        value={message}\n        onChange={(e) => setMessage(e.target.value)}\n        placeholder=\"Type a message...\"\n      />\n      <button onClick={sendMessage}>Send</button>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}